import 'package:flutter/material.dart';
import '../../services/rehabilitasi_service.dart';
import '../../models/rehabilitasi_model.dart';
import '../../widgets/responsive_wrapper.dart';

class TambahRehabilitasiScreen extends StatefulWidget {
  const TambahRehabilitasiScreen({super.key});

  @override
  State<TambahRehabilitasiScreen> createState() => _TambahRehabilitasiScreenState();
}

class _TambahRehabilitasiScreenState extends State<TambahRehabilitasiScreen> {
  final _formKey = GlobalKey<FormState>();
  final _namaController = TextEditingController();
  final _nikController = TextEditingController();
  final _alamatController = TextEditingController();
  final _tanggalMasukController = TextEditingController();
  final _tanggalSelesaiController = TextEditingController();

  String _selectedStatus = 'Rawat Jalan';
  String _selectedJenisKelamin = 'Laki-laki';
  String _selectedLembaga = 'Yayasan Rumah Kita';
  String _selectedStatusProgress = 'Masa Rehab';
  bool _isSubmitting = false;

  final List<String> _statusOptions = ['Rawat Jalan', 'Rawat Inap'];
  final List<String> _jenisKelaminOptions = ['Laki-laki', 'Perempuan'];
  final List<String> _lembagaOptions = [
    'Yayasan Rumah Kita',
    'Yayasan Orbit',
    'Yayasan Plato',
    'Yayasan LRPPN',
    'Yayasan Omah Sehat Bersinar',
    'Yayasan Rumah Merah Putih',
    'Yayasan Ashefa Griya Pusaka',
  ];
  final List<String> _statusProgressOptions = ['Masa Rehab', 'Selesai'];

  @override
  void dispose() {
    _namaController.dispose();
    _nikController.dispose();
    _alamatController.dispose();
    _tanggalMasukController.dispose();
    _tanggalSelesaiController.dispose();
    super.dispose();
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isSubmitting = true);

    try {
      final rehabilitasi = RehabilitasiModel(
        id: '', // Will be auto-generated by service
        nama: _namaController.text.trim(),
        nik: _nikController.text.trim(),
        status: _selectedStatus,
        alamat: _alamatController.text.trim(),
        jenisKelamin: _selectedJenisKelamin,
        lembagaRehab: _selectedLembaga,
        tanggalMasuk: _tanggalMasukController.text.trim(),
        tanggalSelesai: _tanggalSelesaiController.text.trim(),
        statusProgress: _selectedStatusProgress,
      );

      await RehabilitasiService.addRehabilitasi(rehabilitasi);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Data rehabilitasi berhasil ditambahkan dan akan muncul di peta'),
            backgroundColor: Colors.green,
          ),
        );
        Navigator.pop(context, true); // Return true to indicate success
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isSubmitting = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF063CA8),
      body: ResponsiveWrapper(
        child: Column(
          children: [
            _buildHeader(),
            Expanded(
              child: Container(
                decoration: const BoxDecoration(
                  color: Color(0xFFEFEFEF),
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(35),
                    topRight: Radius.circular(35),
                  ),
                ),
                child: SingleChildScrollView(
                  padding: const EdgeInsets.all(24),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      children: [
                        const SizedBox(height: 8),
                        const Text(
                          'Tambah Data Rehabilitasi',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Color(0xFF1A1A1A),
                          ),
                        ),
                        const SizedBox(height: 24),
                        _buildTextField(
                          controller: _namaController,
                          label: 'Nama Lengkap',
                          icon: Icons.person,
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Nama lengkap harus diisi';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 16),
                        _buildTextField(
                          controller: _nikController,
                          label: 'NIK',
                          icon: Icons.badge,
                          keyboardType: TextInputType.number,
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'NIK harus diisi';
                            }
                            if (value.trim().length != 16) {
                              return 'NIK harus 16 digit';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 16),
                        _buildTextField(
                          controller: _alamatController,
                          label: 'Alamat',
                          icon: Icons.location_on,
                          maxLines: 2,
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Alamat harus diisi';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 16),
                        _buildDropdown(
                          label: 'Status Rehabilitasi',
                          value: _selectedStatus,
                          options: _statusOptions,
                          icon: Icons.medical_services,
                          onChanged: (value) => setState(() => _selectedStatus = value!),
                        ),
                        const SizedBox(height: 16),
                        _buildDropdown(
                          label: 'Jenis Kelamin',
                          value: _selectedJenisKelamin,
                          options: _jenisKelaminOptions,
                          icon: Icons.person_outline,
                          onChanged: (value) => setState(() => _selectedJenisKelamin = value!),
                        ),
                        const SizedBox(height: 16),
                        _buildDropdown(
                          label: 'Lembaga Rehabilitasi',
                          value: _selectedLembaga,
                          options: _lembagaOptions,
                          icon: Icons.business,
                          onChanged: (value) => setState(() => _selectedLembaga = value!),
                        ),
                        const SizedBox(height: 16),
                        _buildTextField(
                          controller: _tanggalMasukController,
                          label: 'Tanggal Masuk (contoh: 7 Agustus 2024)',
                          icon: Icons.calendar_today,
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Tanggal masuk harus diisi';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 16),
                        _buildTextField(
                          controller: _tanggalSelesaiController,
                          label: 'Tanggal Selesai (contoh: 18 Agustus 2024)',
                          icon: Icons.event_available,
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Tanggal selesai harus diisi';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 16),
                        _buildDropdown(
                          label: 'Status Progress',
                          value: _selectedStatusProgress,
                          options: _statusProgressOptions,
                          icon: Icons.info,
                          onChanged: (value) => setState(() => _selectedStatusProgress = value!),
                        ),
                        const SizedBox(height: 32),
                        SizedBox(
                          width: double.infinity,
                          height: 50,
                          child: ElevatedButton(
                            onPressed: _isSubmitting ? null : _submitForm,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: const Color(0xFF063CA8),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                            ),
                            child: _isSubmitting
                                ? const CircularProgressIndicator(color: Colors.white)
                                : const Text(
                                    'Tambah Data Rehabilitasi',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                          ),
                        ),
                        const SizedBox(height: 16),
                        const Text(
                          'Setelah data ditambahkan, lokasi akan otomatis muncul di peta persebaran berdasarkan alamat yang dimasukkan.',
                          style: TextStyle(
                            fontSize: 12,
                            color: Color(0xFF666666),
                            fontStyle: FontStyle.italic,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return SafeArea(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
        child: Row(
          children: [
            GestureDetector(
              onTap: () => Navigator.pop(context),
              child: Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(
                  Icons.arrow_back,
                  color: Colors.white,
                  size: 20,
                ),
              ),
            ),
            const SizedBox(width: 16),
            const Expanded(
              child: Text(
                'Tambah Data Rehabilitasi',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    String? Function(String?)? validator,
    TextInputType? keyboardType,
    int maxLines = 1,
  }) {
    return TextFormField(
      controller: controller,
      validator: validator,
      keyboardType: keyboardType,
      maxLines: maxLines,
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon, color: const Color(0xFF063CA8)),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFFE0E0E0)),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF063CA8), width: 2),
        ),
        filled: true,
        fillColor: Colors.white,
      ),
    );
  }

  Widget _buildDropdown({
    required String label,
    required String value,
    required List<String> options,
    required IconData icon,
    required void Function(String?) onChanged,
  }) {
    return DropdownButtonFormField<String>(
      value: value,
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon, color: const Color(0xFF063CA8)),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFFE0E0E0)),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF063CA8), width: 2),
        ),
        filled: true,
        fillColor: Colors.white,
      ),
      items: options.map((String option) {
        return DropdownMenuItem<String>(
          value: option,
          child: Text(option),
        );
      }).toList(),
      onChanged: onChanged,
    );
  }
}
